Колосальная работа проведена над интерфесом, я просто в шоке. Никогда не думал что такое можно
написать на Windows.Forms, так ещё и на IronPython, если бы работа успела на конкурс, то это +10
баллов в любом случае.
Безумно круто сделаны правила игры!
ОМГ, а эти подсказки когда несколько раз подряд ошибаешься))) оч круто!
Аккуратное отношение к уровням доступа полей, методов и свойств, мало кто за этим так пристально следил.
Были смелые решения разделять код на доп модули даже если там одна переменная (не всегда это хорошо, но) и это здорово, можно было сделать и больше, но всё ещё впереди.
"Мёртвого кода" было минимум и это очень радует.
В целом видно, что было интересно писать игру и было желание написать хорошо.

Но есть и некоторые как мне кажется недочёты:
1. Немного не интуитивно что нужно выбирать кнопки, которые НЕ правильные, чтобы в итоге осталась одна правильная.
    Да, это написано в правилах, но я похоже не внимательно их читал в первый раз;
2. Окно правил лучше запускать в отдельном потоке, чтобы можно было и играть и на правила смотреть.
    Подробности в коде.
3. Некоторые задачи решены своими костылями без применения стандартных библиотек, либо
    функций, но в этом ничего страшного нет, главное интересоваться лучшими практиками;
4. Очень больша проблема когда инициализируются поля класса не в методе __init__, подробнее об этом
    в классах.
5. Плохое решение собрать в один класс две сущности. Я говорю про класс FieldAndRules, сейчас не вспомню
    где это было, либо в "Рефакторинг" Мартина Фаулера, либо "Чистый код" Роберта Мартина, но
    если вы видите класс, в имени которого есть "and" или вы хотите его так назвать, то это первый
    признак проблемы и единственно верным решением будет разделить класс на простые составляющие.
6. Нужно стараться избегать "Магических чисел" и заменять их на тип Enum или константы из модулей.
    Таким образом код будет ещё лучше читаться.
7. Очень много ресурсов и настроек которые по сути нигде не определены. Хорошим решением будет создание
    класса, а может быть даже модуля с ресурсами и настройками, и уже его подгружать куда нужно и
    использовать не "голые" пути, а хорошо читаемые наименования ссылок на ресурсы.
8. В некоторых случаях стоит чуть больше времени уделять наименованиям, хотя в целом в коде таких
    проблем было очень мало.